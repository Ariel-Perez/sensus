h1 = @question.survey_model.name
h3 = @question.label + ": " + @question.description
hr

.row
  .col-xs-12.col-md-3
    - @filters.each do |filter|
      select.filter.form-control
        option value="0" = "No filtrar por #{filter.name}"
        - filter.filter_values.each do |value|
          option value="#{value.id}" = "#{value.value}"
    select#category.form-control
      option value="0" No filtrar por Categoría
      - @categories.each do |category|
        option value="#{category.id}" = category.name

    a.add-filters.btn.btn-wide.btn-success.text-left href="#{@survey ? survey_question_charts_path(@survey, @question) : question_charts_path(@question)}"
      i.glyphicon.glyphicon-stats
      | Generar Gráfico
    a.add-filters.btn.btn-wide.btn-success.text-left href="#{@survey ? survey_question_wordcloud_path(@survey, @question) : question_wordcloud_path(@question)}"
      i.glyphicon.glyphicon-cloud
      | Nube de Palabras
    / a.add-filters.btn.btn-wide.btn-primary.text-left href="#{question_download_classifications_path(@question)}"
    /   i.glyphicon.glyphicon-download
    /   | Descargar Datos
  .col-xs-12.col-md-9
    .row
      .col-xs-12
        div#canvas width="850" height="400"

javascript:
  $(document).ready(function() {
    var words = gon.word_frequencies;
    var highestCount = gon.highest_frequency;

    var cloud = d3.layout.cloud;
    var fill = d3.scale.category20();
    var height = 400;
    var width = 850;

    function draw(words) {
      d3.select("#canvas").append("svg")
          .attr("width", layout.size()[0])
          .attr("height", layout.size()[1])
        .append("g")
          .attr("transform", "translate(" + layout.size()[0] / 2 + "," + layout.size()[1] / 2 + ")")
        .selectAll("text")
          .data(words)
        .enter().append("text")
          .style("font-size", function(d) { return d.size + "px"; })
          .style("font-family", "Impact")
          .style("fill", function(d, i) { return fill(i); })
          .attr("text-anchor", "middle")
          .attr("transform", function(d) {
            return "translate(" + [d.x, d.y] + ")rotate(" + d.rotate + ")";
          })
          .text(function(d) { return d.text; });
    }

    var layout = cloud()
        .size([width, height])
        .words(words)
        .padding(15)
        .rotate(function() { return Math.random() * -60; })
        .font("Impact")
        .fontSize(function(d) { return d.size / highestCount * 100; })
        .on("end", draw);

    layout.start();
  });

  // Set filters
  if (gon.filter) {
    var filters = gon.filter.split(',');
    filters.forEach(function(value, index) {
      if (value != '0') {
        $('select.filter')[index].value = value;
      }
    });
  }
  if (gon.category) {
    $('#category').val(gon.category);
  }

  $('.add-filters').click(function(event) {
    event.preventDefault();
    var new_link = $(this).attr('href') + '?filter=';

    var filters = $('select.filter');
    filters.each(function(i, e) {
      if (i > 0) {
        new_link += ',';
      }
      new_link += e.value;
    });

    var category = $('select#category').val();
    new_link += '&category=' + category;

    window.location = new_link;
  });