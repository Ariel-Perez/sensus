ol.breadcrumb
  li
    a href="/"
      i.glyphicon.glyphicon-home
  li
    a href="#{results_path}" Resultados
  -if @survey
    li
      a href="#{survey_results_path(@survey)}" = "#{@question.survey_model.name} - #{@survey.name}"
    li.active = @question.label
  -else
    li
      a href="#{survey_model_path(@question.survey_model)}" = "#{@question.survey_model.name} - #{@question.label}"
nav
  ul.pagination
    - @next = @question.next
    - @previous = @question.previous
    - @questions = @question.survey_model.questions.order(:index)

    li class="#{@previous ? "" : "disabled"}"
      a href="#{@previous ? (@survey ? survey_question_charts_path(@survey, @previous) : question_charts_path(@previous)) : "#"}" aria-label="Previous"
        span aria-hidden="true" &laquo;
    - @questions.each do |q|
      li class="#{q == @question ? "active" : ""}"
        a href="#{q == @question ? "#" : (@survey ? survey_question_charts_path(@survey, q) : question_charts_path(q))}"
          = q.label
    li class="#{@next ? "" : "disabled"}"
      a href="#{@next ? (@survey ? survey_question_charts_path(@survey, @next) : question_charts_path(@next)) : "#"}" aria-label="Next"
        span aria-hidden="true" &raquo;

h4 = @question.label + ": " + @question.description
hr

.row
  .col-xs-12.col-md-3
    h4
      i.glyphicon.glyphicon-filter
      | Filtros
    - @filters.each do |filter|
      select.filter.form-control
        option value="0" = "No filtrar por #{filter.name}"
        - filter.filter_values.each do |value|
          option value="#{value.id}" = "#{value.value}"
    select#category.form-control
      option value="0" No filtrar por Categoría
      - @categories.each do |category|
        option value="#{category.id}" = category.name
    label for="ngram-filter"
      i.glyphicon.glyphicon-remove-sign
      | Eliminar N-gramas
    .form-group
      textarea#ngram-filter.form-control rows="2" name="ngram-filter" placeholder="Separe n-gramas por comas"
    hr
    a#filter.add-filters.btn.btn-lg.btn-wide.btn-success href="#" Aplicar Filtro

  .col-xs-12.col-md-9
    .row
      .col-xs-12
        ul.nav.nav-tabs
          li.col-xs-6.col-sm-3.text-center role="presentation"
            a.add-filters href="#{@survey ? survey_question_charts_path(@survey, @question) : question_charts_path(@question)}"
              i.glyphicon.glyphicon-stats
              | Gráfico
          li.col-xs-6.col-sm-3.text-center role="presentation" class="#{@n == 1 ? 'active': ''}"
            a.add-filters href="#{@survey ? survey_question_unigrams_path(@survey, @question) : question_unigrams_path(@question)}"
              i.glyphicon.glyphicon-cloud
              | Unigramas
          li.col-xs-6.col-sm-3.text-center role="presentation" class="#{@n == 2 ? 'active': ''}"
            a.add-filters href="#{@survey ? survey_question_bigrams_path(@survey, @question) : question_bigrams_path(@question)}"
              i.glyphicon.glyphicon-cloud
              | Bigramas
          li.col-xs-6.col-sm-3.text-center role="presentation" class="#{@n == 3 ? 'active': ''}"
            a.add-filters href="#{@survey ? survey_question_trigrams_path(@survey, @question) : question_trigrams_path(@question)}"
              i.glyphicon.glyphicon-cloud
              | Trigramas
        div#canvas width="850" height="400"

javascript:
  $(document).ready(function() {
    var words = gon.word_frequencies;
    var highestCount = gon.highest_frequency;

    var cloud = d3.layout.cloud;
    var fill = d3.scale.category20();
    var height = 400;
    var width = 850;
    window.index = 0;

    function draw(words) {
      d3.select("#canvas").append("svg")
          .attr("width", layout.size()[0])
          .attr("height", layout.size()[1])
        .append("g")
          .attr("transform", "translate(" + layout.size()[0] / 2 + "," + layout.size()[1] / 2 + ")")
        .selectAll("text")
          .data(words)
        .enter().append("text")
          .style("font-size", function(d) { return d.size + "px"; })
          .style("font-family", "Impact")
          .style("fill", function(d, i) { return fill(i); })
          .attr("text-anchor", "middle")
          .attr("transform", function(d) {
            return "translate(" + [d.x, d.y] + ")rotate(" + d.rotate + ")";
          })
          .text(function(d) { return d.text; })
          .attr("data-index", function() {
            return window.index++;
          })
          .attr("data-size", function(d) { return d.size; });

      $('text').popover({
        html: true,
        container: 'body',
        title: 'Detalles',
        content: function() {
          var index = $(this).attr("data-index");
          var ngram = gon.word_frequencies[index];

          var content = $('<div></div>');
          content.append($('<strong>Contador:</strong>'));
          content.append($('<span>' + ngram.size + '</span>'));
          content.append($('<hr/>'));
          content.append($('<strong>Ejemplos:</strong>'));
          var samples = $('<ol></ol>');
          ngram.samples.forEach(function(e, i) {
            samples.append($('<li>' + e + '</li>'));
          });
          content.append(samples);
          return content.html();
        },
        placement: 'auto right',
        trigger: 'click',
        viewport: '#canvas svg'
      });
    }

    var layout = cloud()
        .size([width, height])
        .words(words)
        .padding(15)
        .rotate(function() { return Math.random() * -60; })
        .font("Impact")
        .fontSize(function(d) { return d.size / highestCount * 100; })
        .on("end", draw);

    layout.start();
  });

  // Set filters
  function getNgrams() {
    var text = $('#ngram-filter').val();
    text = text.replace(/ +/g, ' ');
    var ngrams = text.split(',').filter(function(x) { return x.length > 0; });
    return ngrams.map(function(x) { return x.trim(); });
  }
  function checkNgrams() {
    invalid_ngrams = [];
    ngrams = getNgrams();
    ngrams.forEach(function(ngram, index) {
      if (ngram.split(' ').length != gon.n) {
        invalid_ngrams.push('"' + ngram + '"');
      }
    });

    if (invalid_ngrams.length > 0) {
      $('#ngram-filter').parent().addClass('has-error');
      $('#ngram-filter').attr('title', 'El filtro contiene n-gramas inválidos: ' + invalid_ngrams.join(','));
      console.log('invalid');
    } else {
      $('#ngram-filter').parent().removeClass('has-error');
      console.log('valid');
    }
  }
  $('#ngram-filter').change(function(){
    checkNgrams();
  });
  if (gon.filter) {
    var filters = gon.filter.split(',');
    filters.forEach(function(value, index) {
      if (value != '0') {
        $('select.filter')[index].value = value;
      }
    });
  }
  if (gon.category) {
    $('#category').val(gon.category);
  }
  if (gon.remove_ngrams) {
    $('#ngram-filter').val(gon.remove_ngrams);
    checkNgrams();
  }

  $('#filter').attr('href', window.location.pathname);

  $('.add-filters').click(function(event) {
    event.preventDefault();
    var new_link = $(this).attr('href') + '?filter=';

    var filters = $('select.filter');
    filters.each(function(i, e) {
      if (i > 0) {
        new_link += ',';
      }
      new_link += e.value;
    });

    var category = $('select#category').val();
    new_link += '&category=' + category;

    var ngrams = getNgrams();
    new_link += '&remove_ngrams=' + ngrams.join(',')

    window.location = new_link;
  });